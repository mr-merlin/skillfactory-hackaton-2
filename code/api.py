import logging
import os
import sys
import time

from flask import Flask, jsonify, request

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))  # noqa: E402
from sber_auto_model import SberAutoModel  # noqa: E402

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–¥–µ–ª–∏
model = None


def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global model
    try:
        model = SberAutoModel()
        model.load_model("../build/sber_auto_model.pkl")
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False


@app.route("/health", methods=["GET"])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return jsonify(
        {
            "status": "healthy",
            "model_loaded": model is not None,
            "timestamp": time.time(),
        }
    )


@app.route("/predict", methods=["POST"])
def predict():
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏

    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    {
        "visit_number": 1,
        "total_hits": 5,
        "unique_pages": 3,
        "session_duration": 120,
        "visit_hour": 14,
        "visit_weekday": 2,
        "is_weekend": 0,
        "is_mobile": 1,
        "is_android": 0,
        "is_ios": 1,
        "is_desktop": 0,
        "is_tablet": 0,
        "is_moscow": 1,
        "is_paid": 1,
        "avg_time_per_page": 24.0,
        "bounce_rate": 0,
        "deep_engagement": 0,
        "long_session": 0
    }
    """
    start_time = time.time()

    if model is None:
        return jsonify({"error": "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}), 500

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()

        if not data:
            return jsonify({"error": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}), 400

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        result = model.predict(data)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        result["execution_time"] = round(time.time() - start_time, 3)
        result["status"] = "success"

        logger.info(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {result['execution_time']}—Å")
        logger.info(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['conversion_probability']} "
            f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence_level']})"
        )

        return jsonify(result)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return (
            jsonify(
                {
                    "error": str(e),
                    "execution_time": round(time.time() - start_time, 3),
                    "status": "error",
                }
            ),
            500,
        )


@app.route("/predict_batch", methods=["POST"])
def predict_batch():
    """
    –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Å—Å–∏–π

    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    {
        "sessions": [
            {
                "visit_number": 1,
                "total_hits": 5,
                "unique_pages": 3,
                "session_duration": 120,
                "visit_hour": 14,
                "visit_weekday": 2,
                "is_weekend": 0,
                "is_mobile": 1,
                "is_android": 0,
                "is_ios": 1,
                "is_desktop": 0,
                "is_tablet": 0,
                "is_moscow": 1,
                "is_paid": 1,
                "avg_time_per_page": 24.0,
                "bounce_rate": 0,
                "deep_engagement": 0,
                "long_session": 0
            },
            {
                "visit_number": 2,
                "total_hits": 10,
                "unique_pages": 7,
                "session_duration": 300,
                "visit_hour": 16,
                "visit_weekday": 3,
                "is_weekend": 0,
                "is_mobile": 0,
                "is_android": 0,
                "is_ios": 0,
                "is_desktop": 1,
                "is_tablet": 0,
                "is_moscow": 1,
                "is_paid": 0,
                "avg_time_per_page": 30.0,
                "bounce_rate": 0,
                "deep_engagement": 1,
                "long_session": 1
            }
        ]
    }
    """
    start_time = time.time()

    if model is None:
        return jsonify({"error": "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}), 500

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        request_data = request.get_json()

        if not request_data or "sessions" not in request_data:
            return jsonify({"error": "–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}), 400

        sessions = request_data["sessions"]

        if not isinstance(sessions, list):
            return jsonify({"error": "sessions –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"}), 400

        if len(sessions) > 1000:
            return jsonify({"error": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: 1000"}), 400

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        results = model.predict_batch(sessions)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        response = {
            "predictions": results,
            "total_sessions": len(sessions),
            "execution_time": round(time.time() - start_time, 3),
            "status": "success",
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_predictions = [r for r in results if "error" not in r]
        if successful_predictions:
            avg_probability = sum(r["probability"] for r in successful_predictions) / len(
                successful_predictions
            )
            high_confidence_count = sum(
                1 for r in successful_predictions if r["confidence_level"] == "–≤—ã—Å–æ–∫–∞—è"
            )

            response["statistics"] = {
                "successful_predictions": len(successful_predictions),
                "failed_predictions": len(results) - len(successful_predictions),
                "average_probability": round(avg_probability * 100, 2),
                "high_confidence_predictions": high_confidence_count,
                "high_confidence_percentage": (
                    round(high_confidence_count / len(successful_predictions) * 100, 2)
                    if successful_predictions
                    else 0
                ),
            }

        logger.info(
            f"‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {len(sessions)} —Å–µ—Å—Å–∏–π "
            f"–∑–∞ {response['execution_time']}—Å"
        )

        return jsonify(response)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return (
            jsonify(
                {
                    "error": str(e),
                    "execution_time": round(time.time() - start_time, 3),
                    "status": "error",
                }
            ),
            500,
        )


@app.route("/model_info", methods=["GET"])
def model_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
    if model is None:
        return jsonify({"error": "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}), 500

    return jsonify(
        {
            "feature_count": len(model.feature_names) if model.feature_names else 0,
            "target_actions_count": len(model.target_actions) if model.target_actions else 0,
            "feature_names": model.feature_names[:10] if model.feature_names else [],
            "target_actions": model.target_actions[:5] if model.target_actions else [],
            "status": "loaded",
        }
    )


@app.route("/example", methods=["GET"])
def get_example():
    """–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    return jsonify(
        {
            "example_data": {
                "visit_number": 1,
                "total_hits": 5,
                "unique_pages": 3,
                "session_duration": 120,
                "visit_hour": 14,
                "visit_weekday": 2,
                "is_weekend": 0,
                "is_mobile": 1,
                "is_android": 0,
                "is_ios": 1,
                "is_desktop": 0,
                "is_tablet": 0,
                "is_moscow": 1,
                "is_paid": 1,
                "avg_time_per_page": 24.0,
                "bounce_rate": 0,
                "deep_engagement": 0,
                "long_session": 0,
            },
            "description": "–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
        }
    )


@app.route("/features", methods=["GET"])
def get_features():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏"""
    if model is None:
        return jsonify({"error": "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}), 500

    return jsonify(
        {
            "features": model.feature_names,
            "feature_count": len(model.feature_names),
            "feature_categories": {
                "temporal": [
                    f
                    for f in model.feature_names
                    if any(
                        x in f for x in ["hour", "week", "morning", "afternoon", "evening", "night"]
                    )
                ],
                "device": [
                    f
                    for f in model.feature_names
                    if any(
                        x in f
                        for x in [
                            "mobile",
                            "android",
                            "ios",
                            "desktop",
                            "tablet",
                            "windows",
                            "macos",
                        ]
                    )
                ],
                "geographic": [
                    f
                    for f in model.feature_names
                    if any(x in f for x in ["moscow", "spb", "city", "regional"])
                ],
                "behavioral": [
                    f
                    for f in model.feature_names
                    if any(x in f for x in ["hits", "pages", "duration", "engagement", "activity"])
                ],
                "traffic": [
                    f
                    for f in model.feature_names
                    if any(x in f for x in ["paid", "organic", "referral", "direct"])
                ],
            },
        }
    )


@app.route("/stats", methods=["GET"])
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    return jsonify(
        {
            "uptime": time.time(),
            "endpoints": [
                "GET /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è",
                "POST /predict - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏",
                "POST /predict_batch - –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
                "GET /model_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏",
                "GET /example - –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö",
                "GET /features - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
                "GET /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API",
            ],
        }
    )


if __name__ == "__main__":
    print("üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if load_model():
        print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
        print("   GET  /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
        print("   POST /predict - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏")
        print("   POST /predict_batch - –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
        print("   GET  /model_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        print("   GET  /example - –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
        print("   GET  /features - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print("   GET  /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API")

        print("üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5001")
        print(f"üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(model.feature_names)}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.run(host="0.0.0.0", port=5001, debug=False)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. " "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ sber_auto_model.pkl")
