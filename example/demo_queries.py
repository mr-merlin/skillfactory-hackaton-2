#!/usr/bin/env python3
"""
üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑
"""

import requests


def test_query(name, data, expected_behavior):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏"""
    print(f"\nüîç –¢–µ—Å—Ç: {name}")
    print(f"üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {expected_behavior}")

    try:
        response = requests.post("http://localhost:5001/predict", json=data, timeout=10)

        if response.status_code == 200:
            result = response.json()
            probability = result["conversion_probability"]
            execution_time = result["execution_time"]

            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {probability} –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f}—Å")
            print(
                f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: "
                f"{'–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç' if result['will_convert'] else '–ù–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç'}"
            )

            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–ü–†–û–°–û–í –ö –ú–û–î–ï–õ–ò")
    print("=" * 50)

    # –¢–µ—Å—Ç 1: –í—ã—Å–æ–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    high_conversion_data = {
        "visit_number": 3,
        "total_hits": 15,
        "unique_pages": 8,
        "session_duration": 600,
        "visit_hour": 19,  # –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
        "visit_weekday": 2,
        "is_weekend": 0,
        "is_mobile": 1,
        "is_android": 0,
        "is_ios": 1,
        "is_desktop": 0,
        "is_tablet": 0,
        "is_moscow": 1,
        "is_paid": 1,
        "avg_time_per_page": 40.0,
        "bounce_rate": 0,
        "deep_engagement": 1,
        "long_session": 1,
    }

    test_query(
        "–í—ã—Å–æ–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è",
        high_conversion_data,
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º, iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º, "
        "–≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
    )

    # –¢–µ—Å—Ç 2: –ù–∏–∑–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    low_conversion_data = {
        "visit_number": 1,
        "total_hits": 2,
        "unique_pages": 1,
        "session_duration": 30,
        "visit_hour": 3,
        "visit_weekday": 6,
        "is_weekend": 1,
        "is_mobile": 0,
        "is_android": 0,
        "is_ios": 0,
        "is_desktop": 1,
        "is_tablet": 0,
        "is_moscow": 0,
        "is_paid": 0,
        "avg_time_per_page": 15.0,
        "bounce_rate": 1,
        "deep_engagement": 0,
        "long_session": 0,
    }

    test_query(
        "–ù–∏–∑–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è",
        low_conversion_data,
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∑–∫–∏–º –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º, –¥–µ—Å–∫—Ç–æ–ø–æ–º, "
        "–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∑–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
    )

    # –¢–µ—Å—Ç 3: –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    medium_conversion_data = {
        "visit_number": 2,
        "total_hits": 7,
        "unique_pages": 4,
        "session_duration": 240,
        "visit_hour": 10,
        "visit_weekday": 3,
        "is_weekend": 0,
        "is_mobile": 1,
        "is_android": 1,
        "is_ios": 0,
        "is_desktop": 0,
        "is_tablet": 0,
        "is_moscow": 0,
        "is_paid": 1,
        "avg_time_per_page": 25.7,
        "bounce_rate": 0,
        "deep_engagement": 0,
        "long_session": 0,
    }

    test_query(
        "–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
        medium_conversion_data,
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å "
        "—Å—Ä–µ–¥–Ω—é—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
    )

    # –¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    print("\nüïê –°–†–ê–í–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –°–£–¢–û–ö")
    print("-" * 30)

    base_data = medium_conversion_data.copy()

    # –î–µ–Ω—å
    day_data = base_data.copy()
    day_data["visit_hour"] = 14
    day_result = test_query("–î–µ–Ω—å (14:00)", day_data, "–î–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

    # –í–µ—á–µ—Ä
    evening_data = base_data.copy()
    evening_data["visit_hour"] = 19
    evening_result = test_query("–í–µ—á–µ—Ä (19:00)", evening_data, "–í–µ—á–µ—Ä–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

    # –ù–æ—á—å
    night_data = base_data.copy()
    night_data["visit_hour"] = 3
    night_result = test_query("–ù–æ—á—å (03:00)", night_data, "–ù–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

    # –¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    print("\nüì± –°–†–ê–í–ù–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í")
    print("-" * 30)

    # Android
    android_data = base_data.copy()
    android_data.update({"is_mobile": 1, "is_android": 1, "is_ios": 0, "is_desktop": 0})
    android_result = test_query("Android", android_data, "–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Android")

    # iOS
    ios_data = base_data.copy()
    ios_data.update({"is_mobile": 1, "is_android": 0, "is_ios": 1, "is_desktop": 0})
    ios_result = test_query("iOS", ios_data, "–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ iOS")

    # Desktop
    desktop_data = base_data.copy()
    desktop_data.update({"is_mobile": 0, "is_android": 0, "is_ios": 0, "is_desktop": 1})
    desktop_result = test_query("Desktop", desktop_data, "–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")

    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)

    if day_result and evening_result and night_result:
        print("üïê –í–ª–∏—è–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:")
        print(f"   –î–µ–Ω—å (14:00): {day_result['conversion_probability']}")
        print(f"   –í–µ—á–µ—Ä (19:00): {evening_result['conversion_probability']}")
        print(f"   –ù–æ—á—å (03:00): {night_result['conversion_probability']}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è
        times = [
            ("–î–µ–Ω—å", day_result["probability"]),
            ("–í–µ—á–µ—Ä", evening_result["probability"]),
            ("–ù–æ—á—å", night_result["probability"]),
        ]
        best_time = max(times, key=lambda x: x[1])
        print(f"   üèÜ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {best_time[0]} ({best_time[1] * 100:.2f}%)")

    if android_result and ios_result and desktop_result:
        print("\nüì± –í–ª–∏—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        print(f"   Android: {android_result['conversion_probability']}")
        print(f"   iOS: {ios_result['conversion_probability']}")
        print(f"   Desktop: {desktop_result['conversion_probability']}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        devices = [
            ("Android", android_result["probability"]),
            ("iOS", ios_result["probability"]),
            ("Desktop", desktop_result["probability"]),
        ]
        best_device = max(devices, key=lambda x: x[1])
        print(f"   üèÜ –õ—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {best_device[0]} ({best_device[1] * 100:.2f}%)")

    print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
    print("   ‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è (total_hits) - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä")
    print("   ‚Ä¢ –í—Ä–µ–º—è —Å—É—Ç–æ–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é")
    print("   ‚Ä¢ –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ")
    print("   ‚Ä¢ –ú–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")

    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()
