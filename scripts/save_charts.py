#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import warnings

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

warnings.filterwarnings("ignore")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.style.use("default")
sns.set_palette("husl")
pd.set_option("display.max_columns", None)
pd.set_option("display.max_rows", 100)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.rcParams["figure.dpi"] = 300
plt.rcParams["savefig.dpi"] = 300


def main() -> None:
    print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    sessions = pd.read_pickle("data/ga_sessions.pkl")
    hits = pd.read_pickle("data/ga_hits.pkl")

    print(f"üìä –°–µ—Å—Å–∏–∏: {sessions.shape}")
    print(f"üìä –•–∏—Ç—ã: {hits.shape}")

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
    unique_events = hits["event_action"].value_counts()
    target_keywords = [
        "–∑–∞—è–≤–∫–∞",
        "–∑–≤–æ–Ω–æ–∫",
        "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
        "callback",
        "–ø–æ–∫—É–ø–∫–∞",
        "order",
        "submit",
        "contact",
        "call",
        "chat",
        "auth",
    ]
    potential_targets = []

    for event in unique_events.index:
        event_lower = str(event).lower()
        for keyword in target_keywords:
            if keyword in event_lower:
                potential_targets.append((event, unique_events[event]))
                break

    target_actions = [event for event, _ in potential_targets]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    hits["is_target"] = hits["event_action"].apply(
        lambda x: 1 if any(key in str(x).lower() for key in target_actions) else 0
    )

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Å—Å–∏–∏
    session_metrics = (
        hits.groupby("session_id")
        .agg(
            {
                "is_target": "max",
                "hit_number": "count",
                "hit_page_path": "nunique",
                "hit_time": lambda x: max(x) - min(x) if len(x) > 1 else 0,
            }
        )
        .rename(
            columns={
                "hit_number": "total_hits",
                "hit_page_path": "unique_pages",
                "hit_time": "session_duration",
            }
        )
    )

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Å—Å–∏—è–º–∏
    df = sessions.merge(session_metrics, on="session_id", how="left")
    df["is_target"] = df["is_target"].fillna(0).astype(int)
    df["session_duration"] = df["session_duration"].fillna(0)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    try:
        date_str = df["visit_date"].astype(str)
        time_str = df["visit_time"].astype(str)
        datetime_str = date_str + " " + time_str
        df["visit_datetime"] = pd.to_datetime(datetime_str, errors="coerce")

        df["visit_hour"] = df["visit_datetime"].dt.hour
        df["visit_weekday"] = df["visit_datetime"].dt.weekday
        df["is_weekend"] = df["visit_weekday"].isin([5, 6]).astype(int)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        df["visit_hour"] = 12
        df["visit_weekday"] = 0
        df["is_weekend"] = 0

    df["is_mobile"] = (df["device_category"] == "mobile").astype(int)
    df["is_android"] = (df["device_os"] == "Android").astype(int)
    df["is_ios"] = (df["device_os"] == "iOS").astype(int)
    df["is_desktop"] = (df["device_category"] == "desktop").astype(int)
    df["is_tablet"] = (df["device_category"] == "tablet").astype(int)
    df["is_moscow"] = (df["geo_city"] == "Moscow").astype(int)
    df["is_paid"] = (
        ~df["utm_medium"].isin(["organic", "referral", "(none)"]).astype(int)
    )
    df["avg_time_per_page"] = df["session_duration"] / df["total_hits"]
    df["avg_time_per_page"] = df["avg_time_per_page"].replace([np.inf, -np.inf], 0)
    df["bounce_rate"] = (df["total_hits"] == 1).astype(int)
    df["deep_engagement"] = (df["total_hits"] > 5).astype(int)
    df["long_session"] = (df["session_duration"] > 300).astype(int)

    print("üìä –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏...")

    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    plt.figure(figsize=(10, 6))
    sns.countplot(x="is_target", data=df)
    plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
    plt.xlabel("–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π")
    plt.savefig(
        "charts/—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.png", bbox_inches="tight", dpi=300
    )
    plt.close()

    # 2. –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º
    top_cities = df["geo_city"].value_counts().nlargest(10).index
    plt.figure(figsize=(14, 8))
    city_conversion = (
        df[df["geo_city"].isin(top_cities)]
        .groupby("geo_city")["is_target"]
        .agg(["mean", "count"])
        .reset_index()
    )
    city_conversion = city_conversion[city_conversion["count"] > 100]

    sns.barplot(data=city_conversion, x="geo_city", y="mean")
    plt.title("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º (%)")
    plt.xlabel("–ì–æ—Ä–æ–¥")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")
    plt.xticks(rotation=45)
    plt.savefig("charts/–∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º.png", bbox_inches="tight", dpi=300)
    plt.close()

    # 3. –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    plt.figure(figsize=(12, 8))

    plt.subplot(2, 2, 1)
    device_conversion = (
        df.groupby("device_category")["is_target"].agg(["mean", "count"]).reset_index()
    )
    sns.barplot(data=device_conversion, x="device_category", y="mean")
    plt.title("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")

    plt.subplot(2, 2, 2)
    os_conversion = (
        df.groupby("device_os")["is_target"].agg(["mean", "count"]).reset_index()
    )
    top_os = os_conversion[os_conversion["count"] > 1000]
    sns.barplot(data=top_os, x="device_os", y="mean")
    plt.title("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –û–°")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")
    plt.xticks(rotation=45)

    plt.subplot(2, 2, 3)
    mobile_data = df[df["device_category"] == "mobile"]
    mobile_conversion = (
        mobile_data.groupby("device_os")["is_target"]
        .agg(["mean", "count"])
        .reset_index()
    )
    mobile_conversion = mobile_conversion[
        mobile_conversion["device_os"].isin(["Android", "iOS"])
    ]
    sns.barplot(data=mobile_conversion, x="device_os", y="mean")
    plt.title("Android vs iOS")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")

    plt.subplot(2, 2, 4)
    traffic_conversion = (
        df.groupby("utm_medium")["is_target"].agg(["mean", "count"]).reset_index()
    )
    top_traffic = traffic_conversion[traffic_conversion["count"] > 500]
    sns.barplot(data=top_traffic, x="utm_medium", y="mean")
    plt.title("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")
    plt.xticks(rotation=45)

    plt.tight_layout()
    plt.savefig("charts/–∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤.png", bbox_inches="tight", dpi=300)
    plt.close()

    # 4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    plt.figure(figsize=(15, 10))

    plt.subplot(2, 2, 1)
    hourly_conversion = (
        df.groupby("visit_hour")["is_target"].agg(["mean", "count"]).reset_index()
    )
    sns.barplot(data=hourly_conversion, x="visit_hour", y="mean")
    plt.title("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫")
    plt.xlabel("–ß–∞—Å")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")

    plt.subplot(2, 2, 2)
    weekday_conversion = (
        df.groupby("visit_weekday")["is_target"].agg(["mean", "count"]).reset_index()
    )
    weekday_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    weekday_conversion["weekday_name"] = weekday_conversion["visit_weekday"].map(
        lambda x: weekday_names[x]
    )
    sns.barplot(data=weekday_conversion, x="weekday_name", y="mean")
    plt.title("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    plt.xlabel("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")

    plt.subplot(2, 2, 3)
    session_data = df[df["session_duration"] < df["session_duration"].quantile(0.95)]
    sns.histplot(data=session_data, x="session_duration", hue="is_target", bins=30)
    plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π")
    plt.xlabel("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥—ã)")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    plt.subplot(2, 2, 4)
    corr_features = [
        "is_target",
        "total_hits",
        "unique_pages",
        "session_duration",
        "is_mobile",
        "is_paid",
    ]
    correlation_matrix = df[corr_features].corr()
    sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", center=0)
    plt.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")

    plt.tight_layout()
    plt.savefig(
        "charts/–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.png",
        bbox_inches="tight",
        dpi=300,
    )
    plt.close()

    # 5. –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫)
    plt.figure(figsize=(12, 6))
    sns.barplot(data=hourly_conversion, x="visit_hour", y="mean")
    plt.title("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫")
    plt.xlabel("–ß–∞—Å")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")
    plt.savefig("charts/–∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫.png", bbox_inches="tight", dpi=300)
    plt.close()

    # 6. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π (–æ—Ç–¥–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫)
    plt.figure(figsize=(12, 6))
    session_data = df[df["session_duration"] < df["session_duration"].quantile(0.95)]
    sns.histplot(data=session_data, x="session_duration", hue="is_target", bins=30)
    plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π")
    plt.xlabel("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥—ã)")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.savefig("charts/–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π.png", bbox_inches="tight", dpi=300)
    plt.close()

    # 7. –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫)
    plt.figure(figsize=(14, 8))
    traffic_conversion = (
        df.groupby("utm_medium")["is_target"].agg(["mean", "count"]).reset_index()
    )
    top_traffic = traffic_conversion[traffic_conversion["count"] > 500]
    sns.barplot(data=top_traffic, x="utm_medium", y="mean")
    plt.title("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞")
    plt.xlabel("–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞")
    plt.ylabel("–ö–æ–Ω–≤–µ—Ä—Å–∏—è")
    plt.xticks(rotation=45)
    plt.savefig(
        "charts/–∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞.png", bbox_inches="tight", dpi=300
    )
    plt.close()

    print("‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É charts/")


if __name__ == "__main__":
    main()
