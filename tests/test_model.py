#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–æ–¥–µ–ª–∏ –°–±–µ—Ä–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import os
import sys

import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), "..", "code"))


def test_api_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    try:
        response = requests.get("http://localhost:5001/health", timeout=5)
        if response.status_code == 200:
            return True
    except requests.exceptions.RequestException:
        pass
    return False


def make_prediction(data):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.post("http://localhost:5001/predict", json=data, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"HTTP {response.status_code}"}
    except requests.exceptions.RequestException as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"}


def test_high_conversion_scenario():
    """–¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    print("üîç –¢–µ—Å—Ç: –í—ã—Å–æ–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è")
    print(
        "üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º, "
        "iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º, –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"
    )
    print("üìä –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ~5.0%")

    data = {
        "visit_number": 3,
        "total_hits": 15,
        "unique_pages": 8,
        "session_duration": 600,
        "visit_hour": 19,
        "is_weekend": 0,
        "is_mobile": 1,
        "is_android": 0,
        "is_ios": 1,
        "is_desktop": 0,
        "is_tablet": 0,
        "is_moscow": 1,
        "is_paid": 1,
        "avg_time_per_page": 40.0,
        "bounce_rate": 0,
        "deep_engagement": 1,
        "long_session": 1,
    }

    result = make_prediction(data)
    if "error" in result:
        print(f"‚ùå {result['error']}")
        return False
    else:
        prob = result.get("conversion_probability", "N/A")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {prob}")
        return True


def test_low_conversion_scenario():
    """–¢–µ—Å—Ç –Ω–∏–∑–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç: –ù–∏–∑–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è")
    print(
        "üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∑–∫–∏–º –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º, "
        "–¥–µ—Å–∫—Ç–æ–ø–æ–º, –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∑–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"
    )
    print("üìä –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ~0.1%")

    data = {
        "visit_number": 1,
        "total_hits": 2,
        "unique_pages": 1,
        "session_duration": 30,
        "visit_hour": 3,
        "visit_weekday": 6,
        "is_weekend": 1,
        "is_mobile": 0,
        "is_android": 0,
        "is_ios": 0,
        "is_desktop": 1,
        "is_tablet": 0,
        "is_moscow": 0,
        "is_paid": 0,
        "avg_time_per_page": 15.0,
        "bounce_rate": 1,
        "deep_engagement": 0,
        "long_session": 0,
    }

    result = make_prediction(data)
    if "error" in result:
        print(f"‚ùå {result['error']}")
        return False
    else:
        prob = result.get("conversion_probability", "N/A")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {prob}")
        return True


def test_medium_conversion_scenario():
    """–¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç: –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
    print(
        "üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ "
        "–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"
    )
    print("üìä –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ~2.2%")

    data = {
        "visit_number": 2,
        "total_hits": 8,
        "unique_pages": 4,
        "session_duration": 240,
        "visit_hour": 10,
        "visit_weekday": 3,
        "is_weekend": 0,
        "is_mobile": 1,
        "is_android": 1,
        "is_ios": 0,
        "is_desktop": 0,
        "is_tablet": 0,
        "is_moscow": 0,
        "is_paid": 1,
        "avg_time_per_page": 30.0,
        "bounce_rate": 0,
        "deep_engagement": 0,
        "long_session": 0,
    }

    result = make_prediction(data)
    if "error" in result:
        print(f"‚ùå {result['error']}")
        return False
    else:
        prob = result.get("conversion_probability", "N/A")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {prob}")
        return True


def test_time_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    print("\nüïê –°–†–ê–í–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –°–£–¢–û–ö")
    print("------------------------------")

    base_data = {
        "visit_number": 2,
        "total_hits": 8,
        "unique_pages": 4,
        "session_duration": 240,
        "visit_weekday": 2,
        "is_weekend": 0,
        "is_mobile": 1,
        "is_android": 1,
        "is_ios": 0,
        "is_desktop": 0,
        "is_tablet": 0,
        "is_moscow": 1,
        "is_paid": 1,
        "avg_time_per_page": 30.0,
        "bounce_rate": 0,
        "deep_engagement": 0,
        "long_session": 0,
    }

    times = [
        (14, "–î–µ–Ω—å (14:00)", "–î–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
        (19, "–í–µ—á–µ—Ä (19:00)", "–í–µ—á–µ—Ä–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
        (3, "–ù–æ—á—å (03:00)", "–ù–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
    ]

    results = []
    for hour, name, description in times:
        print(f"\nüîç –¢–µ—Å—Ç: {name}")
        print(f"üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {description}")

        data = base_data.copy()
        data["visit_hour"] = hour

        result = make_prediction(data)
        if "error" in result:
            print(f"‚ùå {result['error']}")
            results.append(False)
        else:
            prob = result.get("conversion_probability", "N/A")
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {prob}")
            results.append(True)

    return all(results)


def test_device_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("\nüì± –°–†–ê–í–ù–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í")
    print("------------------------------")

    base_data = {
        "visit_number": 2,
        "total_hits": 8,
        "unique_pages": 4,
        "session_duration": 240,
        "visit_hour": 14,
        "visit_weekday": 2,
        "is_weekend": 0,
        "is_moscow": 1,
        "is_paid": 1,
        "avg_time_per_page": 30.0,
        "bounce_rate": 0,
        "deep_engagement": 0,
        "long_session": 0,
    }

    devices = [
        (1, 0, 0, 0, "Android", "–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Android"),
        (1, 0, 1, 0, "iOS", "–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ iOS"),
        (0, 0, 0, 1, "Desktop", "–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"),
    ]

    results = []
    for is_mobile, is_android, is_ios, is_desktop, name, description in devices:
        print(f"\nüîç –¢–µ—Å—Ç: {name}")
        print(f"üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {description}")

        data = base_data.copy()
        data.update(
            {
                "is_mobile": is_mobile,
                "is_android": is_android,
                "is_ios": is_ios,
                "is_desktop": is_desktop,
            }
        )

        result = make_prediction(data)
        if "error" in result:
            print(f"‚ùå {result['error']}")
            results.append(False)
        else:
            prob = result.get("conversion_probability", "N/A")
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {prob}")
            results.append(True)

    return all(results)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    if not test_api_connection():
        print(
            "‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
            "–ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏—è 2) –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."
        )
        return

    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–í—ã—Å–æ–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è", test_high_conversion_scenario),
        ("–ù–∏–∑–∫–æ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è", test_low_conversion_scenario),
        ("–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏", test_medium_conversion_scenario),
        ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫", test_time_comparison),
        ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", test_device_comparison),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\n{'=' * 50}")
        print(f"üß™ –¢–ï–°–¢: {test_name}")
        print(f"{'=' * 50}")

        try:
            if test_func():
                passed += 1
                print(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'=' * 50}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'=' * 50}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed / total) * 100:.1f}%")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")

    print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
    print("   ‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è (total_hits) - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä")
    print("   ‚Ä¢ –í—Ä–µ–º—è —Å—É—Ç–æ–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é")
    print("   ‚Ä¢ –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ")
    print("   ‚Ä¢ –ú–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")


if __name__ == "__main__":
    main()
