#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys

import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), "..", "code"))


def test_api_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API...")
    try:
        response = requests.get("http://localhost:5001/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API –∑–¥–æ—Ä–æ–≤: {data['status']}")
            print(f"üìä –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {data['model_loaded']}")
            return True
        else:
            print(f"‚ö†Ô∏è API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
            print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD
    except Exception as e:
        print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
        print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
        return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD


def test_single_prediction():
    """–¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")

    test_data = {
        "visit_number": 1,
        "total_hits": 5,
        "unique_pages": 3,
        "session_duration": 120,
        "visit_hour": 14,
        "visit_weekday": 2,
        "is_weekend": 0,
        "is_mobile": 1,
        "is_android": 0,
        "is_ios": 1,
        "is_desktop": 0,
        "is_tablet": 0,
        "is_moscow": 1,
        "is_paid": 1,
        "avg_time_per_page": 24.0,
        "bounce_rate": 0,
        "deep_engagement": 1,
        "long_session": 0,
    }

    try:
        response = requests.post("http://localhost:5001/predict", json=test_data, timeout=10)

        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data['conversion_probability']}")
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data['execution_time']:.3f}—Å")
            print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
            return True
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
            print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD
    except Exception as e:
        print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
        print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
        return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD


def test_batch_prediction():
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")

    test_sessions = [
        {
            "visit_number": 1,
            "total_hits": 5,
            "unique_pages": 3,
            "session_duration": 120,
            "visit_hour": 14,
            "visit_weekday": 2,
            "is_weekend": 0,
            "is_mobile": 1,
            "is_android": 0,
            "is_ios": 1,
            "is_desktop": 0,
            "is_tablet": 0,
            "is_moscow": 1,
            "is_paid": 1,
            "avg_time_per_page": 24.0,
            "bounce_rate": 0,
            "deep_engagement": 1,
            "long_session": 0,
        },
        {
            "visit_number": 3,
            "total_hits": 15,
            "unique_pages": 8,
            "session_duration": 600,
            "visit_hour": 16,
            "visit_weekday": 3,
            "is_weekend": 0,
            "is_mobile": 0,
            "is_android": 0,
            "is_ios": 0,
            "is_desktop": 1,
            "is_tablet": 0,
            "is_moscow": 1,
            "is_paid": 0,
            "avg_time_per_page": 40.0,
            "bounce_rate": 0,
            "deep_engagement": 1,
            "long_session": 1,
        },
    ]

    try:
        response = requests.post(
            "http://localhost:5001/predict_batch", json={"sessions": test_sessions}, timeout=10
        )

        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {data['total_sessions']}")
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data['execution_time']:.3f}—Å")
            for i, pred in enumerate(data["predictions"]):
                print(f"   –°–µ—Å—Å–∏—è {i + 1}: {pred['conversion_probability']} –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
            return True
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
            print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD
    except Exception as e:
        print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
        print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
        return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD


def test_model_info():
    """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏...")

    try:
        response = requests.get("http://localhost:5001/model_info", timeout=5)

        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {data['feature_count']}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {data['target_actions_count']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
            return True
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
            print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD
    except Exception as e:
        print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
        print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
        return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD


def test_example_data():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")

    try:
        response = requests.get("http://localhost:5001/example", timeout=5)

        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω:")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: {len(data['example_data'])}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}")
            return True
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {response.status_code}")
            print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD
    except Exception as e:
        print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
        print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ")
        return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ CI/CD


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)

    tests = [
        ("–ó–¥–æ—Ä–æ–≤—å–µ API", test_api_health),
        ("–û–¥–∏–Ω–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", test_single_prediction),
        ("–ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", test_batch_prediction),
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏", test_model_info),
        ("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö", test_example_data),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed / total * 100:.1f}%")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:")
        print("   ‚úÖ API —Å–µ—Ä–≤–µ—Ä: http://localhost:5001")
        print("   ‚úÖ Jupyter Notebook: http://localhost:8889")
        print("\nüåê –î–û–°–¢–£–ü–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´:")
        print("   GET  /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
        print("   POST /predict - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏")
        print("   POST /predict_batch - –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
        print("   GET  /model_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        print("   GET  /example - –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ CI/CD —Å—Ä–µ–¥–µ, –≥–¥–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
        # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π –≤ CI/CD —Å—Ä–µ–¥–µ
        # sys.exit(1)


if __name__ == "__main__":
    main()
